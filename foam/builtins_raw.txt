+
| Add two numbers.
a: integer, b: integer -> a + b
  1 2 +
> 3

*
| Multiply two numbers.
a: integer, b: integer -> a * b
  # 5 # 7 *
> 35

++
| Concatenate two blocks.
a: block, b: block -> a ++ b
  [a b] [c d] ++
> [a b c d]

{_}
| Pop an element and wrap it in a singleton block.
any -> [a]
  ' Hello {_}
> [Hello]

_}
| Append an element to a list.
a: block, b -> a ++ [b]
  [1 2 3 4] 10 _}
> [1 2 3 4 10]

{_
| Prepend an element to a list.
a, b: block -> [a] ++ b
  1 [2 3 4] {_
> [1 2 3 4]

//
| Swap the top two elements on the stack.
a, b -> b, a
  1 ' Hello //
> Hello, 1

{_'
| Like `{_`, but take arguments in the opposite order.
a: block, b -> [b] ++ a
  [2 3 4] 1 {_'
> [1 2 3 4]

@
| Reverse the order of the first 3 stack items.
a, b, c -> c, b, a
  1 ' Hello [a b c] @
> [a b c], Hello, 1

{#}
| Pop `N` and turn the first `N` stack items into a block.
...s, a: integer -> ...s[:a], s[a:]
  ' a ' b ' c ' d 'e # 4 {#}
> a, [b c d e]

~
| Execute  the given block in a new call frame.
a: block -> call_stack.add_frame(a)
  1 2 [+] ~
> 3

~*
| Execute the given block in the current call frame.
a: block -> call_stack.frames[0].extend_front(a)
  1 2 ['] ~* +
> 1, 2, +

,@
| Pop an element from the caller's call frame.
 -> call_stack.frames[1].pop(0)
  1 2 [,@] ~ +
> 1, 2, +

'
| Pop an element from the current call frame.
 -> call_stack.frames[1].pop(0)
  ' Hello
> Hello

."
| Pop a string and output it.
a: string -> output(a)
  ' |Hello, World!| ."
> output: Hello, World!

.
| Pop a list or string and output the uneval'ed form.
a: string -> output(uneval(a))
  ' |Hi there| .
> output: |Hi there|
  [|foo bar| baz] .
> output: [|foo bar| baz]

.#
| Pop a number and output its decimal representation.
a: number -> output(a)
  10 10 + .#
> output: 20

<
| Output a string with a trailing newline.
a: string -> output(a + '\n')
  ' a <
> output: a\n

.'
| Pop a string from the current call frame and output it.
 -> output(call_stack.frames[0].pop(0))
  .' foo
> output: foo

<'
| Pop a string from the current call frame and output it,
| with a trailing newline.
 -> output(call_stack.frames[0].pop(0) + '\n')
  .' Hello!
> output: Hello!\n

.@
| Pop an element from the stack and add it to the caller's frame.
a -> call_stack.frames[1].prepend(a)
  10 ' foo [' < .@] ~ .#
> output: foo\n10

.@*
| Pop a block from the stack and dump its contents into the caller's frame.
a: block -> call_stack.frames[1].extend_front(a)
  10 [[1 +] .@*] ~ .#
> output: 11

>#
| Pop a string and attempt to parse it as a number.
| Error if it cannot be parsed.
a: string -> int(a)
  ' 5 >#
> 5

#
| Pop a string from the current call frame and attempt to parse it as a number.
| Error if it cannot be parsed.
 -> int(call_stack.frames[0].pop(0))
  # 99 # 4 +
> 103
  # -5 # 5 +
> 0

0
| Push 0 to the stack. Alias for `# 0`.
 -> 0
  0 # 3 +
> 2

1
| Push 1 to the stack. Alias for `# 1`.
 -> 1
  1 10 +
> 11

2
| Push 2 to the stack. Alias for `# 2`.
 -> 2
  1 2 + 2 +
> 5

-1
| Push -1 to the stack. Alias for `# -1`.
 -> -1
  1 -1 +
> 0

10
| Push 10 to the stack. Alias for `# 10`.
 -> 10
  10 10 +
> 20

#8
| Push 256 to the stack. Alias for `# 256`.
 -> 256
  #8 10 +
> 276

e2
| Push 100 to the stack. Alias for `# 100`.
 -> 100
  e2 : +
> 200

e3
| Push 1000 to the stack. Alias for `# 1000`.
 -> 1000
  e3 e2 -
> 900

>"
| Pop an integer and push its string representation.
a: number -> str(a)
  # 3 # 4 >" . >" .
> 43

=.
| Pop a string and a block. Redefine the command with the string as its name
| to execute the block.
a: block, b: string -> commands[string] = block
  [+] ' - =. 10 2 -
> 12

,
| Read a character from STDIN and push it as a string.
 -> stdin.get_char()
  , ."
> output: first character of input

,*
| Read the entirety of input from STDIN and push it as a string.
 -> stdin.read()
  ,* ."
> cat program

,@*
| Push the entirety of the caller's call frame.
 -> call_stack.frames[1].copy()
  [,@* ~] ~ 2 : + .#
> output: 44

,@*'
| Push the entirety of the current call frame.
 -> call_stack.frames[0].copy()
  ,@*' : ++ .
> output: [: ++ . : ++ .]

;#
| Read an integer from STDIN.
 -> stdin.get_integer()
  ;# : +
> output: input * 2

`
| Pop an element and generate a string representation.
a: string -> uneval(a)
  [a |b c|] `
> |[a \|b c\|]|

`*
| Pop an element and push a block that, when evaluated,
| will push that element.
a -> blockify(a)
  # 3 >" `*
> [' 3]

->
| Pop an element from the stack and a name from the current call
| frame, then redefine the operation with that name to push the
| element.
a -> commands[call_stack.frames[0].pop()] = blockify(a)
  1 -> a
  10 -> b
  b a -
> 9

:
| Pop an element from the stack and push back twice.
a -> a, a
  e2 : +
> 200

_~
| Pop a block from the stack and push its elements back, one by one.
a: block -> ...a
  10 [1 2] _~ ># // ># + +
> 13

-*
| Pop a number and push its additive inverse.
a: number -> -n
  10 -*
> -10
  -1 -*
> 1

-%
| Pop a block and push it reversed.
a: block -> reverse(a)
  [a b c] -%
> [c b a]

!;
| Pop an element from the stack and discard it.
a -> 
  ' foo ' bar !; ."
> output: foo

)
| Remove the last element of a block and push it separately.
| Leave the block on the stack.
a: block -> a[:-1], a[-1]
  [a b c] )
> [a b] c

(
| Remove the first element of a block and push it separately.
| Leave the block on the stack.
a: block -> a[1:], a[0]
  [1 4 9 16] (
> [4 9 16] 1

!)
| Pop a block and push it back without its last element.
a: block -> a[:-1]
  [a b c] !)
> [a b]

(!
| Pop a block and push it back without its first element.
a: block -> a[1:]
  [foo bar baz] (!
> [bar baz]

(!)
| Pop a block and push it back without its first or last element.
a: block -> [1:-1]
  [1 2 3 4 5] (!)
> [2 3 4]

+1
| Increment a number. Alias for `1 +`.
a: number -> a + 1
  1 2 -1
  # 3 {#}
  [+1] :%
> [2 3 0]

-
| Subtract two numbers.
a: number, b: number -> a - b
  1 -1 -
> 2

--
| Decrement a number. Alias for `1 -`.
a: number -> a - 1
  -1 --
> -2

<->
| Palindromize: append a block and its reverse with the first element dropped.
a: block -> a ++ reverse(a[1:])
  [a b c] <->
> [a b c b a]

>-<
| Reverse palindromize. Alias for `-% <->`.
a: block -> reverse(a) ++ a[1:]
  [foo bar baz] >-<
> [baz bar foo bar baz]

:%
| Pop two blocks. Treat the second as a function and map it over the first.
a: block, b: block -> map(b, a)
  [1 2 3] [># 1-] :%
> [0 1 2]

:/
| Pop two blocks. Treat the second as a function and map it over the first.
| Rather than collecting the results into a new block, dump them onto the stack.
a: block, b: block -> ...map(b, a)
  [1 2 3] [># 1-] :/
> 0, 1, 2

..
| Pop a number and push a block containing all nonnegative numbers less than it,
| in sorted order.
a: number -> [0..a-1]
  [0 2 10] [># ..] :%
> [[] [0 1] [0 1 2 3 4 5 6 7 8 9]]

..#
| Pop a block and push its length.
a: block -> a.length
  10 .. ..#
> 10

:#
| Pop a block and push it back, along with its length.
a: block -> a, a.length
  [a b c d e f] :#
> [a b c d e f] 6

.-
| Pop a number and push a reversed range. Alias for `.. -%`.
a: number -> [a-1..0]
  # 5 .-
> [4 3 2 1 0]

,,
| Pop two stack elements and push a block containing them.
| Alias for `2 {#}`.
a, b -> [a b]
  ' foo ' bar # 3 ,,
> foo [bar 3]

%
| Modulo operation on two numbers. This uses Python's `%` operator,
| where the result is only negative if the divisor is negative.
a: number, b: number -> a % b
  # 762 # -3 %
> -1

/
| Integer division on two numbers. This uses Python's `//` operator,
| which always rounds towards negative infinity.
a: number, b: number -> a/b
  # 123 # 11 /
> 11

~#~
| Pop a number `n` and two blocks.
| Execute both blocks, sharing `n` stack elements.
...s, a: block, b: block, n: number -> b(a(s) + s[-n:])
  5 [1+] [--] 1 ~#~
> 4, 6
  3 5 [+] [-] 2 ~#~
> 8, -2

/%
| Pop two numbers and push their divmod.
| Alias for `[/] [%] 2 ~#~`.
a: number, b: number -> a/b, a%b
  # 105 # 20 /%
> [5 5]

#/
| Pop a number and push a block containing its divisors.
a: number -> divisors(a)
  # 360 #/
> [1 2 3 4 5 6 8 9 10 12 15 18 20 24 30 36 40 45 60 72 90 120 180 360]

%=
| Pop two numbers and push whether the second is divisible by the first.
a: number, b: number -> !(a % b)
  8 4 %=
> 1
  100 29 %=
> 0

=
| Pop two items and push `1` if they are equal, and `0` otherwise.
| Elements of different types are never considered equal.
a, b -> !(a == b)
  2 : + # 4 =
> 1
  # 5 ' 5 =
> 0
  [0 1 2] [>#] :%
  0 1 2 # 3 {#}
  =
> 1

%:#
| Pop a number and push the number of divisors it has.
| Alias for `/# ..#`
a: number -> divisors(a).length
  e2 %:#
> 9

#.%
| Pop a number and push `1` if it is prime, `0` otherwise.
| Alias for `%:# 2 =`.
a: number -> divisors(a).length == 2
  # 19 #.%
> 1
  # 20 #.%
> 0

?#
| Pop a number and return a uniformly random nonnegative integer
| that is less than it.
a: number -> floor(random() * a)
  # e3 ?#
> 413

?=
| Pop a block and return a randomly chosen element of that block.
a: block -> a.pick_random()
  [foo bar baz quux] ?=
> baz

%?
| Randomly push either `0` or `1`. Alias for `2 ?#`.
 -> [0, 1].pick_random()
  [%?] : ++ : ++ : ++ : ++ ~
> 0 1 1 1 0 1 1 0

*)
| Pop a number `n` and push `2n + 1`. Alias for `2 * +1`.
a: number -> 2*a + 1
  5 *)
> 11

(*
| Pop a number `n` and push `(n - 1)/2`. Alias for `-- 2 /`.
a: number -> (a - 1) / 2
  # 11 (*
> 5
  # 27 (*
> 13

=#
| Pop an index and a block, then return the element of the block
| at that index. Indexing is 0-based and cyclic, so the 4th element
| of `[a b c]` is considered to be `b`.
a: block, b: number -> a[b % a.length]
  [a b c] # 4 =#
> b
  # 5 .- 1 =#
> 3

2%
| Modulo by 2; push `0` if the input is even and `1` if it is odd.
a: number -> a % 2
  -196
> 0
  3
> 1

+/
| Pop a block containing numbers and return the sum of all the numbers.
a: block -> block.sum()
  5 .. +/
> 10
  [] +/
> 0

